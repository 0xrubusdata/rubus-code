services:
  rubus-backend:
    build: ./backend
    container_name: rubus-backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    env_file:
      - .env
      - .env.override
    depends_on:
      - rubus-postgres
      - rubus-faiss
      - rubus-ollama
    networks:
      - code-network

  rubus-frontend:
    build: ./frontend
    container_name: rubus-frontend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    env_file:
      - .env
      - .env.override
    depends_on:
      - rubus-backend
    networks:
      - code-network

  rubus-postgres:
    image: postgres:15
    container_name: rubus-postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    env_file:
      - .env
      - .env.override
    networks:
      - code-network

  rubus-adminer:
    image: adminer
    container_name: rubus-adminer
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: rubus-postgres
    ports:
      - "${ADMIRER_PORT}:${ADMIRER_PORT}"    
    networks:
      - code-network  

  rubus-faiss:
    image: chromadb/chroma
    container_name: rubus-chromadb
    restart: always
    ports:
      - "${VECTOR_DB_PORT}:${VECTOR_DB_PORT}"
    env_file:
      - .env
      - .env.override
    networks:
      - code-network

  rubus-ollama:
    build:
      context: ./ollama
      dockerfile: Dockerfile
    container_name: rubus-ollama
    restart: always
    ports:
      - "${OLLAMA_PORT}:${OLLAMA_PORT}"
    environment:
      - LOCAL_MODEL=${LOCAL_MODEL}
      - LOCAL_MODEL_NAME=${LOCAL_MODEL_NAME}
      - OLLAMA_PORT=${OLLAMA_PORT}
    volumes:
      - ollama_data:/root/.ollama
      - ./ollama/init.sh:/init.sh
    entrypoint: ["/bin/sh", "/init.sh"]
    env_file:
      - .env
      - .env.override
    networks:
      - code-network

  #rubus-scheduler:
  #  image: node:18
  #  container_name: rubus-scheduler
  #  working_dir: /app
  #  volumes:
  #    - ./backend:/app
  #  env_file:
  #    - .env
  #    - .env.override
  #  command: ["npm", "run", "start:scheduler"]
  #  depends_on:
  #    - rubus-backend
  #  networks:
  #    - code-network

  rubus-portainer:
    image: portainer/portainer-ce
    container_name: rubus-portainer
    restart: always
    ports:
      - "${PORTAINER_PORT}:${PORTAINER_PORT}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    env_file:
      - .env
      - .env.override
    networks:
      - code-network

volumes:
  ollama_data:
    driver: local
  portainer_data:
    driver: local

networks:
  code-network:
    driver: bridge
